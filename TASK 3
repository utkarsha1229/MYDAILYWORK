TASK_3 âž–Build a simple console-based Tic-Tac-Toe game that
allows two players to play against each other

TASK 3

TIC-TAC-TOE GAME

Game Board: Create a 3x3 grid as the game board.
Players: Assign
"X"
and "O" to two players.

Display Board: Show the current state of the board.
Player Input: Prompt the current player to enter their move.
Update Board: Update the game board with the player
'
s move.

Check for Win: Check if the current player has won.
Check for Draw: Determine if the game is a draw.
Switch Players: Alternate turns between
"X"
and "O"

players.

Display Result: Show the result of the game (win, draw, or ongoing).
Play Again: Ask if the players want to play another game.


#include <iostream>
using namespace std;

class TicTacToe {
private:
    char board[3][3];  // 3x3 game board
    char currentPlayer;  // Current player ('X' or 'O')
    
public:
    TicTacToe() {
        // Initialize the game board with empty spaces
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                board[i][j] = ' ';
            }
        }
        currentPlayer = 'X';  // 'X' goes first
    }
    
    // Function to display the current state of the board
    void displayBoard() {
        cout << "\n";
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                cout << board[i][j];
                if (j < 2) cout << " | ";
            }
            if (i < 2) cout << "\n---------\n";
        }
        cout << "\n";
    }

    // Function to take input from the current player
    void playerInput() {
        int row, col;
        cout << "\nPlayer " << currentPlayer << ", enter your move (row and column): ";
        cin >> row >> col;

        // Check if the move is valid
        while (row < 1 || row > 3 || col < 1 || col > 3 || board[row-1][col-1] != ' ') {
            cout << "Invalid move. Try again: ";
            cin >> row >> col;
        }
        
        // Update the board with the player's move
        board[row-1][col-1] = currentPlayer;
    }
    
    // Function to switch turns between 'X' and 'O'
    void switchPlayer() {
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }
    
    // Function to check if the current player has won
    bool checkWin() {
        // Check rows and columns
        for (int i = 0; i < 3; i++) {
            if ((board[i][0] == currentPlayer && board[i][1] == currentPlayer && board[i][2] == currentPlayer) ||
                (board[0][i] == currentPlayer && board[1][i] == currentPlayer && board[2][i] == currentPlayer)) {
                return true;
            }
        }
        // Check diagonals
        if ((board[0][0] == currentPlayer && board[1][1] == currentPlayer && board[2][2] == currentPlayer) ||
            (board[0][2] == currentPlayer && board[1][1] == currentPlayer && board[2][0] == currentPlayer)) {
            return true;
        }
        return false;
    }
    
    // Function to check if the game is a draw
    bool checkDraw() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == ' ') {
                    return false;  // If there's an empty space, the game isn't a draw
                }
            }
        }
        return true;  // All spaces are filled, it's a draw
    }
    
    // Main function to play the game
    void playGame() {
        bool gameEnd = false;
        while (!gameEnd) {
            displayBoard();  // Show the board
            playerInput();   // Current player makes a move
            
            if (checkWin()) {
                displayBoard();
                cout << "\nPlayer " << currentPlayer << " wins!\n";
                gameEnd = true;
            } else if (checkDraw()) {
                displayBoard();
                cout << "\nThe game is a draw!\n";
                gameEnd = true;
            } else {
                switchPlayer();  // Switch to the other player
            }
        }
    }
    
    // Function to ask if players want to play again
    bool playAgain() {
        char choice;
        cout << "\nDo you want to play again? (y/n): ";
        cin >> choice;
        return (choice == 'y' || choice == 'Y');
    }
};

int main() {
    TicTacToe game;
    do {
        game = TicTacToe();  // Create a new game instance
        game.playGame();     // Play the game
    } while (game.playAgain());  // Ask to play again
    
    cout << "\nThank you for playing Tic-Tac-Toe!\n";
    return 0;
}
